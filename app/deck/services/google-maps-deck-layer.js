import { DeckAPILoader } from '../services/deck-api-loader.js';

// üîë –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å OpenSky Network
const username = 'Novakand';
const password = '2208311799';

// üì° API OpenSky Network
const DATA_URL = 'https://opensky-network.org/api/states/all';
const MODEL_URL = './assets/models/airplane.glb';
const REFRESH_TIME_SECONDS = 60;
const DROP_IF_OLDER_THAN_SECONDS = 120;

// üó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö OpenSky
const DATA_INDEX = {
  ICAO24: 0,          // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  CALLSIGN: 1,        // –ü–æ–∑—ã–≤–Ω–æ–π
  ORIGIN_COUNTRY: 2,  // –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
  TIME_POSITION: 3,   // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
  LAST_CONTACT: 4,    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  LONGITUDE: 5,       // –î–æ–ª–≥–æ—Ç–∞
  LATITUDE: 6,        // –®–∏—Ä–æ—Ç–∞
  BARO_ALTITUDE: 7,   // –ë–∞—Ä–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
  ON_GROUND: 8,       // –ù–∞ –∑–µ–º–ª–µ
  VELOCITY: 9,        // –°–∫–æ—Ä–æ—Å—Ç—å
  TRUE_TRACK: 10,     // –ò—Å—Ç–∏–Ω–Ω—ã–π –∫—É—Ä—Å
  VERTICAL_RATE: 11,  // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
  SENSORS: 12,        // –°–µ–Ω—Å–æ—Ä—ã
  GEO_ALTITUDE: 13,   // –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
  SQUAWK: 14,         // –ö–æ–¥ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–¥–µ—Ä–∞
  SPI: 15,            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  POSITION_SOURCE: 16, // –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–∑–∏—Ü–∏–∏
  CATEGORY: 17        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–∞–º–æ–ª–µ—Ç–∞
};

// üïπ **–ê–Ω–∏–º–∞—Ü–∏—è, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º React-–∫–æ–¥–µ**
const ANIMATIONS = {
  '*': { speed: 1 } // –ò—Å–ø–æ–ª—å–∑—É–µ–º `speed: 1`, –∫–∞–∫ –≤ React-–∫–æ–¥–µ
};

// üìå **–§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)**
function easeInOutQuad(t) {
  return t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2;
}

// üõ†Ô∏è **–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏**
function getTooltip({ object }) {
  return (
    object &&
    `\
    Call Sign: ${object[DATA_INDEX.CALLSIGN] || ''}
    Country: ${object[DATA_INDEX.ORIGIN_COUNTRY] || ''}
    Vertical Rate: ${object[DATA_INDEX.VERTICAL_RATE] || 0} m/s
    Velocity: ${object[DATA_INDEX.VELOCITY] || 0} m/s
    Direction: ${object[DATA_INDEX.TRUE_TRACK] || 0}¬∞`
  );
}

export class GoogleMapsDeckOverlay {
  constructor(map) {
    this.loader = new DeckAPILoader();
    this._map = map;
    this.overlay = null;
    this.api = null;
    this.dataById = {}; // –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    this.data = []; // –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–æ—è
    this.tooltip = null; // –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    this.init();
  }

  // üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  async fetchFlightPositions() {
    try {
      const credentials = btoa(`${username}:${password}`);

      const resp = await fetch(DATA_URL);

      if (!resp.ok) throw new Error(`Failed to fetch flight positions, status: ${resp.status}`);

      const { time, states } = await resp.json();
      states.forEach(a => {
        a[DATA_INDEX.LAST_CONTACT] = time - a[DATA_INDEX.LAST_CONTACT];
      });

      //console.log("‚úÖ Loaded flight data:", states);
      return states;
    } catch (error) {
      console.error("‚ùå Error fetching flight data:", error);
      return [];
    }
  }

  // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  updateData(newData) {
    console.log("üîÑ Updating existing data...");
    const updatedDataById = {};

    newData.forEach(entry => {
      const id = entry[DATA_INDEX.ICAO24];

      if (this.dataById[id]) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        this.dataById[id].prevPosition = this.dataById[id].currentPosition || [
          entry[DATA_INDEX.LONGITUDE] ?? 0,
          entry[DATA_INDEX.LATITUDE] ?? 0,
          entry[DATA_INDEX.GEO_ALTITUDE] ?? 0
        ];
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        this.dataById[id] = entry;
        this.dataById[id].prevPosition = [
          entry[DATA_INDEX.LONGITUDE] ?? 0,
          entry[DATA_INDEX.LATITUDE] ?? 0,
          entry[DATA_INDEX.GEO_ALTITUDE] ?? 0
        ];
      }

      this.dataById[id].currentPosition = [
        entry[DATA_INDEX.LONGITUDE] ?? 0,
        entry[DATA_INDEX.LATITUDE] ?? 0,
        entry[DATA_INDEX.GEO_ALTITUDE] ?? 0
      ];

      updatedDataById[id] = this.dataById[id];
    });

    // ‚ö†Ô∏è **–ò—Å–ø–æ–ª—å–∑—É–µ–º –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö**
    Object.keys(this.dataById).forEach(id => {
      if (!updatedDataById[id]) {
        console.log(`üóëÔ∏è Removing outdated aircraft: ${id}`);
        delete this.dataById[id];
      }
    });

    this.data = Object.values(this.dataById);
   // console.log("‚úÖ Updated data:", this.data);
  }

  // ‚úàÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—è —Å–∞–º–æ–ª—ë—Ç–æ–≤**
  createFlightLayer() {
    console.log("‚úàÔ∏è Creating ScenegraphLayer...");
    return new this.api.ScenegraphLayer({
      id: 'flight-positions-layer',
      data: this.data,
      scenegraph: MODEL_URL,
      pickable: true,

      // üìå **–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π**
      getPosition: d => d.prevPosition ?? d.currentPosition ?? [
        d[DATA_INDEX.LONGITUDE] ?? 0,
        d[DATA_INDEX.LATITUDE] ?? 0,
        d[DATA_INDEX.GEO_ALTITUDE] ?? 0
      ],

      getOrientation: d => {
        const verticalRate = d[DATA_INDEX.VERTICAL_RATE] ?? 0;
        const velocity = d[DATA_INDEX.VELOCITY] ?? 0;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–æ–ª —Ç–∞–Ω–≥–∞–∂–∞ (pitch) –∏ —Ä—ã—Å–∫–∞–Ω–∏—è (yaw)
        const pitch = (-Math.atan2(verticalRate, velocity) * 180 / Math.PI);
        const yaw = -(d[DATA_INDEX.TRUE_TRACK] ?? 0); // –ò—Å—Ç–∏–Ω–Ω—ã–π –∫—É—Ä—Å (TRUE_TRACK)

        return [pitch, yaw, 90]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–≥–ª—ã –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
      },

      getScale: d => {
        const lastContact = d[DATA_INDEX.LAST_CONTACT];
        return lastContact < -DROP_IF_OLDER_THAN_SECONDS ? [0, 0, 0] : [1, 1, 1];
      },

      transitions: {
        getPosition: d => {
          if (!d || !d.prevPosition || !d.currentPosition) return [0, 0, 0]; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏
          const t = easeInOutQuad(performance.now() % REFRESH_TIME_SECONDS / REFRESH_TIME_SECONDS);
          return [
            (1 - t) * d.prevPosition[0] + t * d.currentPosition[0],
            (1 - t) * d.prevPosition[1] + t * d.currentPosition[1],
            (1 - t) * d.prevPosition[2] + t * d.currentPosition[2]
          ];
        }
      },

      _animations: ANIMATIONS, // ‚úàÔ∏è **–ò—Å–ø–æ–ª—å–∑—É–µ–º `speed: 1`, –∫–∞–∫ –≤ React-–∫–æ–¥–µ**

      sizeScale: 10,
      sizeMinPixels: 0.5,
      sizeMaxPixels: 1.8,
      _lighting: 'pbr',

      // üõ†Ô∏è **–î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getTooltip**
      getTooltip: getTooltip
    });
  }

  // üåç –°–æ–∑–¥–∞–Ω–∏–µ overlay
  createOverlay() {
    console.log("üó∫Ô∏è Initializing DeckGL overlay...");
    this.overlay = new this.api.GoogleMapsOverlay({
      layers: [this.createFlightLayer()]
    });

    // üõ†Ô∏è **–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏**
    this.overlay.setProps({
      getTooltip: getTooltip
    });

    this.overlay.setMap(this._map);
  }

  // üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å–∞–º–æ–ª—ë—Ç–æ–≤**
  updateFlightPositions() {
    try {
      this.fetchFlightPositions().then(newData => {
        if (!newData.length) return;

        this.updateData(newData);

        if (this.overlay) {
          console.log("üîÑ Updating overlay...");
          const currentLayer = this.overlay.props.layers[0];

          this.overlay.setProps({
            layers: [
              currentLayer.clone({
                data: this.data // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ!
              })
            ]
          });
        }
      });
    } catch (error) {
      console.error("‚ùå Error updating flight positions:", error);
    }
  }

  // üöÄ **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è**
  async init() {
    await this._apiLoader();
    const newData = await this.fetchFlightPositions();
    this.updateData(newData);
    this.createOverlay();

    setInterval(() => this.updateFlightPositions(), REFRESH_TIME_SECONDS * 1000);
  }

  // üì¶ **–ó–∞–≥—Ä—É–∑–∫–∞ DeckGL API**
  _apiLoader() {
    return new Promise(resolve => {
      this.loader.load()
        .then(deck => {
          this.api = deck;
          resolve(true);
        })
        .catch(error => {
          console.error("‚ùå Error loading Deck API:", error);
          resolve(false);
        });
    });
  }
}